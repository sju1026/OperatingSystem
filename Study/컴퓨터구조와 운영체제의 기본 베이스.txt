컴퓨터 구조 + 운영체제

1. 컴퓨터 구조를 알아야 하는 이유

 - 프로그래밍 언어 뿐 아니라 컴퓨터의 근간을 알아야 한다
* 장점 : 1)문제 해결 능력 2)성능, 용량, 비용
1)문제 해결 능력
- 코드가 동작이 되지 않는 이유 : 컴퓨터의 근간이 문제 - 분석의 대상 : 부품이 아닌 실행 단계를 확인하기
: 소스코드 외 다른 동작을 확인할 수 있음
-> 미지의 대상에서 분석의 대상으로 바라볼 수 있는 힘 : Computer Architecture
--> 컴퓨터를 관조할 수 있는 능력을 배양
: 문법에 맞는 소스코드를 컴퓨터에 입력만 하는 개발자 X / 컴퓨터를 관조하며 문제를 해결할 수 있는 개발자 O
2) 성능, 용량, 비용
- 사실 개발에서 가장 중요한 이야기 중 하나 : EX) 서버 컴퓨터의 비용, 클라우드(aws)또한 동일
이는 프로그래밍 언어의 기초 문법만으로는 해결하기 어려운 문제
- 컴퓨터 구조는 결국 성능, 용량, 비용에 대한 이야기

2. 컴퓨터 구조의 큰 그림
컴퓨터 구조
- 컴퓨터가 이해하는 정보 : 데이터, 명령어
* 데이터 : 숫자, 문자, 이미지, 동영상과 같은 정적인 정보 / 컴퓨터와 주고받는/내부에 저장된 정보를 데이터라고 통칭
* 명령어 : 컴퓨터는 결국 명령어를 처리하는 기계 / 컴퓨터를 실질적으로 움직이는 정보 / 데이터는 명령어를 위한 일종의 재료
ex) 1과 2를 더해라 : 1,2는 데이터, 더해라는 명령어
이진코드 -> 어셈블리어 -> 소스코드

- 컴퓨터의 네 가지 핵심 부품 : CPU / 메모리 / 보조기억장치 / 입출력장치
* CPU : 메모리에 저장된 멸령어를 읽어 들이고, 해석하고, 실행하는 부품
> ALU : 계산장치 (계산을 위해 존재하는 회로들의 모음) / 산술논리연산장치
> 레지스터 : CPU 내부의 작은 저장장치 
> 제어장치 : 제어신호를 내보내고, 명령어를 해석하는 장치 / 제어신호 : 컴퓨터 부품들을 관리하고 작동시키기 위한 전기 신호(e.g. 메모리 읽기 신호, 메모리 쓰기 신호)
-> CPU는 메모리에 저장된 값을 읽어 들이고, 해석하고, 실행하는 장치다
-> CPU 내부에는 ALU, 레지스터, 제어장치가 있다
-- * ALU는 계산하는 장치 / 레지스터는 임시저장장치(다수존재) / 제어장치는 제어신호를 발생시키고 명령어를 해석하는 장치

* 메모리 (RAM) : 현재 실행되는 프로그램의 명령어와 데이터를 저장하는 부품 : 위치정보 필요 / RAM(휘발성/ 높은 비용)
> 메모리는 실행되는 프로그램의 명령어와 데이터를 저장한다 / 프로그램이 실행되려면 메모리에 저장되어 있어야 한다 / 메모리에 저장된 값의 위치는 주소로 알 수 있다

* 보조기억장치 : 전원이 꺼져도 보관될 프로그램을 저장하는 부품
- 메모리를 실행할 정보를 저장하고 보조기억장치는 보관할 정보를 저장한다
* 입출력장치 : 컴퓨터 외부에 연결되어 컴퓨터 내부와 정보를 교환할 수 있는 부품
- 보조기억장치(ex)USB, 외장하드)의 경우 입출력장치와 유사하기 때문에 주변장치로 통칭하기도 한다
- 하지만 보조기억장치의 경우 메모리를 보조한다는 역할이 존재

* 메인보드 : 컴퓨터 내부의 핵심 부품을 연결시켜주는 부품 / 버스
> 메인보드에 연결된 부품은 버스를 통해 정보를 주고 받음
> 버스는 컴퓨터의 부품끼리 정보를 주고받는 일종의 통로
> 다양한 종류의 버스가 있음
> 컴퓨터의 핵슴 부품을 연결하는 버스는 시스템 버스
** 시스템 버스
- 내부 구성
> 주소버스 : 주소를 주고받는 통로
> 데이터 버스 : 명령어와 데이터를 주고받는 통로
> 제어버스 : 제어 신호를 주고받는 통로

3. 운영체제란
- (시스템)자원 : 프로그램이 실행되기 위해 마땅히 필요한 요소 / 컴퓨터의 네 가지 핵심 부품 포함
- 운영체제 : 자원을 관리하는 특별한 프로그램 / 실행 중인 프로그램을 관리하는 특별한 프로그램(실행중인 프로그램 = 프로세스) - 커널영역에 적재
- 운영체제의 역할 : 커널영역에 적재와 그 외 공간인 사용자 영역, 메모리는 주소를 가진다
* 운영체제는 사용자 영역에서 적재될 위치를 지정해 준다 -> 메모리관리
* 메모리의 물리적인 크기가 실행 프로그램보다 작은 경우에도 실행을 도와준다 = 페이징과 스왑핑 Paging, Swaping
* 어떤 프로세스를 먼저, 얼마나 오래 실행할까 : 여러개의 프로그램이 동시에 실행 X / 여러개의 프로그램이 빠르게 번갈아가면서 실행 O -> 운영체제의 CPU관리(CPU 스케쥴링) : CPU를 필요로 할 때 우선순위 결정, 사용시간 결정하는 역할
* 이렇게 많은 프로그램들이 동시에 실행되는데, 누가 일목요연하게 실행을 관리해주지? - 운영체제의 프로세스 관리(운영체제를 알아야 하는 가장 큰 이유) - 프로세스 동기화 : 동시 혹은 선행실행되야 되는 프로세스를 관리
* 수많은 프로세스들이 자원에 마구 접근해도 괜찮을까? : 동시다발적으로 실행되는 프로세스들이 자원에 동시에 접근할 경우 이를 관리 : 시스템 호출(System call) = 자원의 문지기 -> 문지기역할을 통한 자원 보호(자원 접근을 대행)

4. 운영체제의 큰 그림
- 컴퓨터의 자원들을 관리 / 프로그램이 실행되기 위한 필요한 자원을 바탕으로 프로그램에 효율적으로 할당하여 실행할지를 결정하는 주체
- 관리 : CPU관리 / 프로세스 관리 / 파일시스템 관리 / 메모리 관리 등

5. 운영체제를 알아야 하는 이유
- 운영체제는 사용자를 위한 프로그램이 아니다 / 운영체제는 프로그램을 위한 프로그램이다
- 프로그램을 만드는 개발자는 운영체제를 알아야 한다 = 제작하는 프로그램에 대해 운영체제에게 도움받는 정보를 알아야 근원적으로 알아갈 수 있다 => 오류메세지에 대한 깊은 이해가 가능하다
